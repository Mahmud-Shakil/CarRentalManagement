@model IEnumerable<BookingViewModel>
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Booking Index</h1>
<div>
    <p>
        <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#CreateModal">Create New</button>
    </p>
    <form asp-action="Index" method="get">
        <div class="btnSearch">
            <p>
                Find by name: <input type="text" name="SearchString" value="@ViewBag.CurrentFilter" />
                <input type="submit" value="Search" class="btn btn-info" /> &nbsp;&nbsp;
                <a asp-action="Index" class="btn btn-outline-secondary">Back to Full List</a>
            </p>
        </div>
    </form>
</div>
<table class="table table-bordered table-striped list_table">
    <thead>
        <tr>
            <th>
                SL
            </th>
            <th>
                Customer Name
            </th>
            <th>
                Pick Up Date
            </th>

            <th>
                Drop out Date
            </th>
            <th>
                Total Hiring Days
            </th>
            <th>
                Pick Up Point
            </th>
            <th>
                Drop Point
            </th>
           
            <th>
                @Html.ActionLink("City", "Index", new { SortOrder = ViewBag.SortNameParam }, new { @class = "text-decoration-none" })
            </th>
            <th>
                Post Code
            </th>
            <th>
                Phone No
            </th>
            <th>
                Model
            </th>
            <th>
                Image
            </th>
            <th>
               Daily Hire Rate 
            </th>
            <th>
                Total
            </th>
            <th class="text-center tbl_action">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                @item.SerialNo
            </td>
            <td>
                @item.FullName
            </td>

            <td>
                @item.PickUpDate.ToShortDateString()
            </td>
            <td>
                @item.DropOutDate.ToShortDateString()
            </td>
            <td >
                @item.TotalDaysOfHiring
            </td>
            <td>
                @item.HirePoint
            </td>
            <td>
                @item.DropPoint
            </td>
            <td>
                @item.City
            </td>
            <td>
                @item.PostCode
            </td>
            <td>
                @item.PhoneNumber
            </td>
            <td>
                @item.Model
            </td>
            <td class="text-center">
                <img src="~/images/customer_images/@item.ImageName" width="70" height="80" asp-append-version="true" />
            </td>
            <td>
                @item.DailyHireRate
            </td>
            <td >
                @item.Total
            </td>
            <td>

                <a href="#" class="btn btn-warning" name="details"
                   onclick='EditRecord("+@item.BookingId+")' data-bs-toggle="modal" data-bs-target="#EditModal">Edit</a>
                <a asp-controller="Booking" asp-action="Delete" asp-route-id="@item.BookingId" class="btn btn-outline-danger" onclick="return confirm('Are you sure to delete?')">Delete</a>
        </tr>
        }
    </tbody>
</table>
<div id="itemsDiv">
</div>
@Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page = page }),
new X.PagedList.Web.Common.PagedListRenderOptions
{
    ContainerDivClasses = new[] { "navication" },
    LiElementClasses = new[] { "page-item" },
    PageClasses = new[] { "page-link" },
})
<div class="modal fade" id="CreateModal" tabindex="-1" aria-labelledby="CreateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            @await Html.PartialAsync("_Create", new BookingViewModel())
        </div>
    </div>
</div>
<div class="modal fade" id="EditModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header px-md-5">
                <h3 class="modal-title" id="detailsModalLabel">Update Booking</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body px-md-5">
                <div id="EditDiv">
                    @if (ViewBag.Details == "Show")
                    {
                        <partial name="~/Views/Booking/_Edit.cshtml" />
                        ViewBag.Details = "Show";
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header px-md-5">
                <h3 class="modal-title" id="detailsModalLabel">Details</h3>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body px-md-5">
                <div id="DetailsDiv">
                    @if (ViewBag.Details == "Show")
                    {
                        <partial name="~/Views/Booking/_Details.cshtml" />
                        ViewBag.Details = "Show";
                    }
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    function EditRecord(BookingId) {
        $.ajax({
            url: "/Booking/Edit?id=" + BookingId,
            type: "GET",
            data: "",
            contentType: 'application/json; charset = utf-8',
            success: function (data) {
                $('#EditDiv').show();
                $('#EditDiv').html(data);
            },
            error: function () {
                alert("Error occured")
            }
        })
    };
    function calculateDifference() {

        // Get both values from input field and convert them into Javascript Date object
        var date1 = new Date($("#PickUpDate").val());
        var date2 = new Date($("#DropOutDate").val());

        // Difference can be calculated by subtracting the first date timestamp from second date timestamp
        var timeDifference = date2.getTime() - date1.getTime();

        // Just for debugging purpose
        console.log(timeDifference);
        // There are 1000 milliseconds in 1 second
        var milliSecondsInOneSecond = 1000;

        // There are 3600 seconds in 1 hour
        var secondsInOneHour = 3600;

        // And we all know there are 24 hours in 1 day
        var hoursInOneDay = 24;
        var days = timeDifference / (milliSecondsInOneSecond * secondsInOneHour * hoursInOneDay);
        console.log(days);
        alert(days);
        $("#TotalDaysOfHiring").val(days);
    }
    function calcualte() {
        var date = parseInt($('#TotalDaysOfHiring').val());
        var total = parseInt($('#DailyHireRate').val());
        $("#Total").val(date * total);
       
    }
   
</script>


